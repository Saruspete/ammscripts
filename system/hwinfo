#!/usr/bin/env bash

typeset MYSELF="$(readlink -e $0 || realpath $0)"
typeset MYPATH="${MYSELF%/*}"

# Load main library
typeset -a ammpaths=("$MYPATH/../lib/ammlib" "$HOME/.ammlib" "/etc/ammlib")
for ammpath in "${ammpaths[@]}" fail; do
	[[ -e "$ammpath/ammlib" ]] && source "$ammpath/ammlib" && break
done
[[ "$ammpath" == "fail" ]] && {
	echo >&2 "Unable to find ammlib in paths '${ammpaths[@]}'"
	echo >&2 "Download it with 'git clone https://github.com/Saruspete/ammlib.git ${ammpaths[0]}'"
	exit 1
}

# Check for user root, else issue a warning
if [[ "$__AMMLIB_USERID" != "0" ]]; then
	ammLog::Warning "You are not running this script as root. Some detail may be missing"
fi

typeset LOG_QUIET="false"
typeset OUT_CSV="false"
typeset OUT_FULL="false"
typeset OUT_FILE=""

typeset -a BANNER_FIELDS=()
typeset -a BANNER_LOGO_LINES=()
typeset -i BANNER_LOGO_STRMAX=0
typeset BANNER_FIELDS_STR=""
typeset BANNER_LOGO=""
typeset BANNER_PREPEND=""
typeset BANNER_APPEND=""

ammLib::Require "string" "table" "optparse" "syscfg" "syscfg.network" "network" "hardware" "storage"

ammOptparse::AddOpt "--quiet!" "Should the non-data information be displayed" "$LOG_QUIET"

ammOptparse::AddOptGroupDesc "Output formatting"
ammOptparse::AddOpt "--csv!"   "Format output as CSV"     "$OUT_CSV"
ammOptparse::AddOpt "--file="  "File to place output in"  "$OUT_FILE"
ammOptparse::AddOpt "--full!"  "Do not filter out elements" "$OUT_FULL"

ammOptparse::AddOptGroupDesc "Banner options"
#ammOptparse::AddOpt "-F|--banner-fields@"  "List of fields to place in banner"       "$BANNER_FIELDS_STR"
ammOptparse::AddOpt "-L|--banner-logo="    "Path to ASCII logo to add on the left"   "$BANNER_LOGO"
ammOptparse::AddOpt    "--banner-prepend=" "text or file to add before the banner"   "$BANNER_PREPEND"
ammOptparse::AddOpt    "--banner-append="  "text or file to add after the banner"    "$BANNER_APPEND"
# ammOptparse::AddNote "


ammOptparse::AddActionWord "continue" "all" "banner" "serial"

ammOptparse::Parse || ammLog::Die "Bad options provided"
eval set -- $(ammOptparse::GetUnparsedOpts)

OUT_CSV="$(ammOptparse::Get "csv")"
OUT_FILE="$(ammOptparse::Get "file")"
OUT_FULL="$(ammOptparse::Get "full")"
OUT_QUIET="$(ammOptparse::Get "quiet")"

BANNER_PREPEND="$(ammOptparse::Get "banner-prepend")"
BANNER_APPEND="$(ammOptparse::Get "banner-append")"
BANNER_LOGO="$(ammOptparse::Get "banner-logo")"



# Replace string with files if existing
[[ -n "$BANNER_PREPEND" ]] && [[ -s "$BANNER_PREPEND" ]] && BANNER_PREPEND="$(< "$BANNER_PREPEND")"
[[ -n "$BANNER_APPEND" ]]  && [[ -s "$BANNER_APPEND" ]]  && BANNER_APPEND="$(< "$BANNER_APPEND")"

# Replace with logo
if [[ -n "$BANNER_LOGO" ]]; then
	[[ -s "$BANNER_LOGO" ]] || ammLog::Die "The banner logo is not a valid file: '$BANNER_LOGO'"

	# Read the array, and select the longest line
	readarray -t BANNER_LOGO_LINES < "$BANNER_LOGO" || ammLog::Die "Cannot read banner logo '$BANNER_LOGO'"
	for line in "${BANNER_LOGO_LINES[@]}"; do
		[[ "${#line}" -gt $BANNER_LOGO_STRMAX ]] && BANNER_LOGO_STRMAX="${#line}"
	done
fi


#
# Banner generation
#
function generateBanner {

	typeset line=""

	#
	# Systeme Host
	#
	typeset host_name="$(hostname --fqdn 2>/dev/null || uname -n)"

	#
	# NUMA Hardware
	#
	typeset -i numanode=0 cpucount=0 cpucountTot= cpusmt= memsize= memsizeTot=
	while read line; do
		eval "typeset $line"
		cpucountTot+=$cpucount
		memsizeTot+=$memsize
	done < <(ammHardware::NumaSummary)
	eval "typeset $(ammHardware::SystemSummary | tr "\n" " ")"

	#
	# CPU Processing
	#
	typeset cpucountStr=$cpucountTot
	if [[ -n "$cpusmt" ]] && [[ "$cpusmt" -gt 1 ]]; then
		cpucountStr="$(( $cpucountTot / ${cpusmt:-1} )) (*$cpusmt)"
	fi

	cpumodel="${cpumodel#Intel(R) }"
	cpumodel="${cpumodel//Core(TM) /}"
	cpumodel="${cpumodel//(R)/}"
	cpumodel="${cpumodel// CPU / }"
	cpumodel="${cpumodel%@ *}"


	typeset cpufreq="$(ammHardware::CpuFrequencyGetBasefreq)"
	cpufreq="$(( $cpufreq / 1000))"

	#
	# RAM Processing
	#
	typeset ramList=""
	typeset -A ramDimms=()
	while read line; do
		[[ -z "${line// /}" ]] && continue
		eval "typeset $line"

		ramDimms[$size]=$(( ${ramDimms[$size]:-} + 1 ))
	done < <(ammHardware::MemoryDetail)
	for line in "${!ramDimms[@]}"; do
		ramList+="${ramDimms[$line]}*${line} "
	done
	ramList="${ramList% }"

	#
	# Block devices
	#
	typeset -a blockdevs=()
	typeset blockdev=
	for blockdev in $(ammStorage::ListAvail); do
		typeset blocktype="$(ammStorage::GetType "$blockdev")"
		# List only physical devices
		[[ $blocktype =~ disk|nvme ]] || continue

		blockdevs+=("$(printf "%-8.8s  %5.5s GB  %s\n"  "$blockdev" "$(ammString::UnitConvert "$(ammStorage::GetSize "$blockdev")" "B" "GB")" "$(ammStorage::GetModel "$blockdev") / $(ammStorage::GetSerial "$blockdev")" )")
	done
	#
	# Network
	#
	
	# Get main IP address
	typeset -l ip= what= _junk= ip4main= ip6main=
	while read ip what _junk; do
		[[ "$what" == "stream" ]] || continue
		if ammString::IsIPv6 "$ip"; then
			ip6main="$ip"
		else
			ip4main="$ip"
		fi
	done < <(getent ahosts $host_name)

	typeset -a nics=()
	typeset iface=
	for iface in $(ammSyscfgNetwork::NicGet); do

		eval "typeset $(ammSyscfgNetwork::NicInfo "$iface"| tr "\n" " ")"
		#eval "typeset $(ammSyscfgNetwork::CableInfo "$iface"| tr -d "\n")"

		typeset extra="$driver"
		# If there's no driver, show its type
		if [[ -z "$extra" ]]; then
			typeset nicType="$(ammSyscfgNetwork::NicType "$iface")"
			extra+="$nicType"

#			case $nicType in
#				# Add lower devices in the bridge
#				bridge)
#					typeset lowIface=
#					for lowIface in /sys/class/
#					;;
#			esac

		fi

		# Skip virtual, ephemeral and per-vm bridges (eg proxmox)
		case $iface in
			fwbr[0-9]*|fwln[0-9]*|fwpr[0-9]*|tap[0-9]*)
				continue
				;;
		esac

		# Add the iface to the list
		nics+=("$(printf "  %-15.15s %17.17s %3.3s Gb %10.10s\n" "$iface" "${mac:-}" "$((${speed}/1000))" "$extra")")

		# Get IP addresses for each of these NICs
		typeset ip= ips= _junk=
		while read _junk _junk ips; do
			for ip in $ips; do
				# Remove cidr
				ip="${ip%/*}"

				typeset extra=""
				typeset -i strmax=15

				# Skip private / auto-assigned IPv6
				if ammString::IsIPv6 "$ip"; then
					strmax=39
					ammString::IsIPv6Local "$ip" && continue

					[[ "$ip" == "$ip6main" ]] && extra="**"
				else
					[[ "$ip" == "$ip4main" ]] && extra="**"
				fi

				# If main IP, show somethin

				typeset _junk= rev= _junk=
				read _junk rev _junk < <(getent hosts "$ip")

				# If we have an extra for the main IP, add it to printf max
				[[ -n "$extra" ]] && strmax+="$((${#extra} * 2))"
				nics+=("$(printf "    %-${strmax}.${strmax}s %s\n" "${extra}${ip}${extra}" "$rev")")

			done
		done < <(ip -brief address show dev "$iface")
	done


	# Generate the banner fields
	BANNER_FIELDS=(
		# hostname provided 
		"Host:   $host_name"
		"Model:  $system_manufacturer $system_product_name"
		"Serial: ${system_serial_number// /}"
		""
		"CPU:    $cpucountStr * $cpumodel (${cpufreq} MHz)"
		"RAM:    $(_ramSizeConvert "$memsizeTot") MB ($ramList)"
		""
		"Block-devices:"
		"${blockdevs[@]}"
		""
		"NICs:"
		"${nics[@]}"
	)

	#
	# DO the display
	#

	# Prepend
	[[ -n "$BANNER_PREPEND" ]] && echo "$BANNER_PREPEND"

	# Set the max count of lines to be generated
	typeset -i maxLines="${#BANNER_FIELDS[@]}"
	[[ "${#BANNER_LOGO_LINES[@]}" -gt "$maxLines" ]] && maxLines="${#BANNER_LOGO_LINES[@]}"

	typeset -i lineNum= lineSizeLast=0 lineSizeCurr=0
	for (( lineNum=0; lineNum < maxLines; lineNum++ )); do
		echo "${BANNER_LOGO_LINES[$lineNum]:-$(ammString::Repeat $lineSizeLast)}${BANNER_FIELDS[$lineNum]:-}"

		# align lines after the logo
		lineSizeCurr="${#BANNER_LOGO_LINES[$lineNum]}"
		[[ "$lineSizeCurr" -gt 0 ]] && lineSizeLast=$lineSizeCurr
	done


	[[ -n "$BANNER_APPEND" ]] && echo "$BANNER_APPEND"

}



#
# Get fields
#



function _ramSizeConvert {
	typeset val="$1"

	ammString::UnitConvert "$val" "KB" "MB"
}


#
# System Overview
#
function showSystem {

	ammTable::Create "Hardware" "Type|size:20" "Vendor|size:10%" "Model|size:fill" "Node" "Speed" "Drivers|size:20"
	ammTable::SetDisplayMode "direct"


	typeset t line
	# DMI Elements
	if ammExec::Exists dmidecode; then
		for t in chassis system bios; do
			typeset vendor="" model="" version="" serial=""
			while IFS=: read key val; do
				key="$(ammString::Trim "$key")"
				val="$(ammString::Trim "$val")"
				case $key in
					Manufacturer|Vendor) vendor="$val" ;;
					Product\ Name) model="$val" ;;
					Version)       version="$val" ;;
					Serial\ Number) serial="$val" ;;
					Release\ Date)  model="$val" ;;
				esac

			done < <(ammExec::AsRoot dmidecode -t "$t" 2>/dev/null)

			[[ -n "$version" ]] && model+=" / Version: $version"
			[[ -n "$serial" ]] && model+="  / Serial: $serial"
			ammTable::AddRow "$t" "$vendor" "$model"
		done
	else
		ammLog::Warning "Missing binary 'dmidecode'"
	fi
	# PCI Devices
	while read line; do
		typeset pciid= devtype= vendor= version= device= driver=
		eval "$line"

		# Skip useless devices
		[[ "$devtype" =~ (PCI|Host|ISA)\ bridge ]] && continue

		# Get more details
		typeset driver= current_link_speed= max_link_speed= current_link_width= max_link_width=
		typeset irq= numa_node= enable=
		eval "$(ammHardware::PciDeviceDetail $pciid)"

		typeset speed=""
		[[ -n "$current_link_width" ]] && speed+="$current_link_width/$max_link_width"

		ammTable::AddRow "$devtype" "$vendor" "$device" "$numa_node" "$speed" "$driver"
	done < <(ammHardware::PciDeviceSummary)

}

#
# CPU and Memory overview
#
function showCPUMem {
	echo
	ammTable::Create "NUMA Nodes"  "NUMA" "CPU Model|size:40" "CPU ucode rev" "RAM MB|size:8,callback:_ramSizeConvert" "CPU IDs|size:fill,overflow:wrap"
	ammTable::SetDisplayMode "direct"

	typeset line
	while read line; do
		typeset numanode= cpucount= cpuids= cpumodel= cpuucode= memsize=
		eval "$line"
		ammTable::AddRow "$numanode" "$cpumodel" "$cpuucode" "$memsize" "$cpuids"
	done < <(ammHardware::NumaSummary)

	echo
	ammTable::Create "Memory DIMMs"  "Slot|size:20" "Type" "Size|size:6" "Speed|size:16" "Rank" "Vendor|size:32" "Model|size:32" "Serial|size:fill"
	ammTable::SetDisplayMode "direct"
	while read line; do
		typeset slot= size= type= form= rank= vendor= model= serial= speed= speedmax=
		eval "$line"
		speedstr="$speed"
		[[ "$speed" != "$speedmax" ]] && speedstr="${speed% *} (max: ${speedmax% *})"
		ammTable::AddRow "$slot" "$type" "$size" "$speedstr" "$rank" "$vendor" "$model" "$serial"

	done < <(ammHardware::MemoryDetail)

}


#
# Network details
#
function showNetwork {
	echo
	ammTable::Create "NIC Details"  "NIC|size:16" "Type|size:8" "Driver|size:10" "MAC Address|size:18" "Speed" "Dplx" "Medium|size:8" "IPv4|size:18"
	ammTable::SetDisplayMode "direct"

	typeset nic
	for nic in $(ammSyscfgNetwork::NicGet); do
		typeset speed= duplex= medium= mac= ipv4= vendorid= deviceid= driver=
		eval $(ammSyscfgNetwork::NicInfo $nic)
		eval $(ammSyscfgNetwork::CableInfo $nic)

		# 
		[[ "$carrier" == "0" ]] && duplex="N/A"

		# Try to guess the medium with type
		if [[ -z "$medium" ]]; then
			case "$type" in
				wwan)    medium="WAN" ;;
				wlan)    medium="WiFi" ;;
				bridge)  medium="Virtual" ;;
				ipsec|wireguard)
					medium="VPN"
					;;
			esac
		fi

		ammTable::AddRow "$nic" "$type" "$driver" "$mac" "$speed" "$duplex" "$medium" "$ipv4"
		
	done

}


#
# Storage detail
#
function showStorage {
	ammTable::Create "Storage"
	ammTable::SetDisplayMode "direct"

}

if [[ -z "${1:-}" ]]; then
	ammLog::Error "Usage: $0 <banner|all|system|cpu|network|storage>"
	exit 1

else
	while [[ -n "${1:-}" ]]; do
		case "$1" in
			banner)
				generateBanner
				;;
			all|'')
				showSystem
				showCPUMem
				showNetwork
				showStorage
				;;
			*)
				ammLog::Error "Unknown element to display '$1'"
				;;
		esac
		shift
	done

fi

