#!/usr/bin/env bash

typeset MYSELF="$(readlink -e $0 || realpath $0)"
typeset MYPATH="${MYSELF%/*}"

# Load main library
typeset -a ammpaths=("$MYPATH/../lib/ammlib" "$HOME/.ammlib" "/etc/ammlib")
for ammpath in "${ammpaths[@]}" fail; do
	[[ -e "$ammpath/ammlib" ]] && source "$ammpath/ammlib" && break
done
[[ "$ammpath" == "fail" ]] && {
	echo >&2 "Unable to find ammlib in paths '${ammpaths[@]}'"
	echo >&2 "Download it with 'git clone https://github.com/Saruspete/ammlib.git ${ammpaths[0]}'"
	exit 1
}

# Check for user root, else issue a warning
if [[ "$__AMMLIB_USERID" != "0" ]]; then
	ammLog::Wrn "You are not running this script as root. Some detail may be missing"
fi

typeset LOG_QUIET="false"
typeset OUT_CSV="false"
typeset OUT_FULL="false"
typeset OUT_FILE=""


ammLib::Require "table" "optparse" "syscfg" "syscfg.network" "network" "string" "hardware"

ammOptparse::AddOpt "--quiet!" "Should the non-data information be displayed" "$LOG_QUIET"

ammOptparse::AddOptGroupDesc "Output formatting"
ammOptparse::AddOpt "--csv!"   "Format output as CSV"     "$OUT_CSV"
ammOptparse::AddOpt "--file="  "File to place output in"  "$OUT_FILE"
ammOptparse::AddOpt "--full!"  "Do not filter out elements" "$OUT_FULL"

ammOptparse::AddActionWord "continue" "all" "banner" "serial"

ammOptparse::Parse || ammLog::Die "Bad options provided"
eval set -- $(ammOptparse::GetUnparsedOpts)

OUT_CSV="$(ammOptparse::Get "csv")"
OUT_FILE="$(ammOptparse::Get "file")"
OUT_FULL="$(ammOptparse::Get "full")"
OUT_QUIET="$(ammOptparse::Get "quiet")"


function _ramSizeConvert {
	typeset val="$1"

	ammString::UnitConvert "$val" "KB" "MB"
}


#
# System Overview
#
function showSystem {

	ammTable::Create "Hardware" "Type|size:20" "Vendor|size:10%" "Model|size:fill" "Node" "Speed" "Drivers|size:20"
	ammTable::SetDisplayMode "direct"

	typeset t line
	# DMI Elements
	for t in chassis system bios; do
		typeset vendor="" model="" version="" serial=""
		while IFS=: read key val; do
			key="$(ammString::Trim "$key")"
			val="$(ammString::Trim "$val")"
			case $key in
				Manufacturer|Vendor) vendor="$val" ;;
				Product\ Name) model="$val" ;;
				Version)       version="$val" ;;
				Serial\ Number) serial="$val" ;;
				Release\ Date)  model="$val" ;;
			esac

		done < <(dmidecode -t "$t" 2>/dev/null)

		[[ -n "$version" ]] && model+=" / Version: $version"
		[[ -n "$serial" ]] && model+="  / Serial: $serial"
		ammTable::AddRow "$t" "$vendor" "$model"
	done
	# PCI Devices
	while read line; do
		typeset pciid= devtype= vendor= version= device= driver=
		eval "$line"

		# Skip useless devices
		[[ "$devtype" =~ (PCI|Host|ISA)\ bridge ]] && continue

		# Get more details
		typeset driver= current_link_speed= max_link_speed= current_link_width= max_link_width=
		typeset irq= numa_node= enable=
		eval "$(ammHardware::DeviceDetail $pciid)"

		typeset speed=""
		[[ -n "$current_link_width" ]] && speed+="$current_link_width/$max_link_width"

		ammTable::AddRow "$devtype" "$vendor" "$device" "$numa_node" "$speed" "$driver"
	done < <(ammHardware::DeviceSummary)

}

#
# CPU and Memory overview
#
function showCPUMem {
	echo
	ammTable::Create "CPU and Memory"  "NUMA" "CPU Model|size:40" "CPU ucode rev" "RAM MB|size:8,callback:_ramSizeConvert" "CPU IDs|size:fill,overflow:wrap"
	ammTable::SetDisplayMode "direct"

	typeset line
	while read line; do
		typeset numanode= cpucount= cpuids= cpumodel= cpuucode= memsize=
		eval "$line"
		ammTable::AddRow "$numanode" "$cpumodel" "$cpuucode" "$memsize" "$cpuids"
	done < <(ammHardware::NumaSummary)

	while read line; do
		echo "$line"
	done < <(ammHardware::MemoryDetail)

}


#
# Network details
#
function showNetwork {
	echo
	ammTable::Create "NIC Details"  "NIC|size:16" "Type|size:8" "Driver|size:10" "MAC Address|size:18" "Speed" "Dplx" "Medium" "IPv4|size:18"
	ammTable::SetDisplayMode "direct"

	typeset nic
	for nic in $(ammSyscfgNetwork::NicGet); do
		typeset speed= duplex= medium= mac= ipv4= vendorid= deviceid= driver=
		eval $(ammSyscfgNetwork::NicInfo $nic)
		eval $(ammSyscfgNetwork::CableInfo $nic)

		# 
		[[ "$carrier" == "0" ]] && duplex="N/A"

		# Try to guess the medium with type
		if [[ -z "$medium" ]]; then
			case "$type" in
				wwan)    medium="WAN" ;;
				wlan)    medium="WiFi" ;;
				bridge)  medium="Virtual" ;;
				ipsec|wireguard)
					medium="VPN"
					;;
			esac
		fi

		ammTable::AddRow "$nic" "$type" "$driver" "$mac" "$speed" "$duplex" "$medium" "$ipv4"
		
	done

}


#
# Storage detail
#
function showStorage {
	ammTable::Create "Storage"
	ammTable::SetDisplayMode "direct"

}


showSystem
showCPUMem
showNetwork
showStorage

