#!/usr/bin/env bash

typeset MYSELF="$(realpath $0)"
typeset MYPATH="${MYSELF%/*}"

# Load main library
typeset -a ammpaths=("$MYPATH/../lib/ammlib" "$HOME/.ammlib" "/etc/ammlib")
for ammpath in "${ammpaths[@]}" fail; do
	[[ -e "$ammpath/ammlib" ]] && source "$ammpath/ammlib" && break
done
if [[ "$ammpath" == "fail" ]]; then
	echo >&2 "Unable to find ammlib in paths '${ammpaths[@]}'"
	echo >&2 "Download it with 'git clone https://github.com/Saruspete/ammlib.git ${ammpaths[0]}'"
	exit 1
fi


# Root is required for listing and accessing many paths
[[ "$__AMMLIB_USERID" != 0 ]] && ammLog::Die "You must run this script as root"


ammLib::Require "pkg" "chroot" "optparse"
#ammLib::Require "chroot.centos"


#ammOptparse::AddOptGroupDesc "Configuration"
#ammOptparse::AddOpt "-c|--config"  "Load config from file"       ""
#ammOptparse::AddOpt "-s|--save"    "Save current state as file"  "%{base}/%{name}.cfg"

# Early configuration parsing for help pre-filling
ammOptparse::Parse "config"
#typeset CFG_FILE="$(ammOptparse::Get "config")"

#if [[ -n "$CFG_FILE" ]]; then
#	:
#fi



typeset CHR_OSNAME_AVAIL="$(ammChroot::OSNameList)"

#ammOptparse::AddOptGroup "mount" "Mount-related options"


# This group is only visible for create action
ammOptparse::AddOptGroup "create" "Options for 'create' action"
ammOptparse::AddOpt    "--os-name="         "Name of the OS (avail: ${CHR_OSNAME_AVAIL})" ""   "ammChroot::OSNameValidate"
ammOptparse::AddOpt    "--os-version="      "Version (release) of the OS"
#ammOptparse::AddOpt "-p|--packages@"        "List of packages or binaries to install"    ""
#ammOptparse::AddOpt    "--kernel-version="  "Kernel version returned by 'uname -r'"
#ammOptparse::AddOpt    "--kernel-sources@"  "Kernel sources to be installed"


ammOptparse::AddActionWord "break" "stop" "start" "destroy" "enter" "exec"
ammOptparse::AddActionWord "continue" "create"
#ammOptparse::RequireOrAsk "--name" # "--os-name" "--os-version"
#ammOptparse::RequireOrAskForWord "create" "--os-name" "--os-version"

ammOptparse::Parse || ammLog::Die "Parsing error"


typeset CHR_OSNAME="$(ammOptparse::Get "os-name")"
typeset CHR_OSVERS="$(ammOptparse::Get "os-version")"
#typeset CHR_KRNVERS="$(ammOptparse::Get "kernel-version")"
#typeset CHR_KRNSRCS=


function chrootmgr::list {
	
	ammChroot::List
}

function chrootmgr::create {
	typeset chrootDir="$1"

	# Checks
	if ! ammChroot::OSNameValidate "$CHR_OSNAME"; then
		ammLog::Error "OS Name is invalid !"
		return 1
	fi

	ammLog::StepBegin "Creating chroot '$CHR_OSNAME-$CHR_OSVERS' in '$chrootDir'"
	# Create the chroot
	if ! ammChroot::Create "$chrootDir" "$CHR_OSNAME" "$CHR_OSVERS"; then
		ammLog::Error "Error during chroot creation on '$chrootDir' os '$CHR_OSNAME' version '$CHR_OSVERS'"
		ammLog::StepEnd 1
		return 1
	fi

	ammLog::StepEnd

}

function chrootmgr::destroy {
	typeset chrootDir="$1"

	ammChroot::Stop "$chrootDir"
	ammChroot::Destroy "$chrootDir"
}


function main {

	typeset action="${1:-}"; shift
	typeset -i r=0

	if [[ -z "${1:-}" ]]; then
		echo >&2 "Usage: $0 $action <chrootdir> [action-specific options...]"
		return 1
	fi

	case "$action" in

		# Create a new chroot
		create)
			chrootmgr::create "$@"
			r=$?
			;;

		destroy)
			typeset dir
			for dir in "$@"; do
				if ammChroot::ChrootValidate "$dir"; then
					ammChroot::Stop "$dir"
					ammChroot::Destroy "$dir"
					r+=$?
				else
					ammLog::Warning "Path '$dir' is not a valid chroot dir"
				fi
			done
			;;

		start)
			typeset dir
			for dir in "$@"; do
				if ammChroot::ChrootValidate "$dir"; then
					ammChroot::Start "$dir"
					r+=$?
				else
					ammLog::Warning "Path '$dir' is not a valid chroot dir"
				fi
			done
			;;

		stop)
			typeset dir
			for dir in "$@"; do
				if ammChroot::ChrootValidate "$dir"; then
					ammChroot::Stop "$dir"
					r+=$?
				else
					ammLog::Warning "Path '$dir' is not a valid chroot dir"
				fi
			done
			;;

		enter|exec)
			if [[ -z "${1:-}" ]] || ! ammChroot::ChrootValidate "$1"; then
				ammLog::Error "Invalid chroot '$dir'"
				return 1
			else
				typeset dir="$1"; shift
				ammChroot::Exec "$dir" "$@"
				r=$?
			fi
			;;

#		install)
#			;;
		*)
			# Empty action, show help
			if [[ -z "$action" ]]; then
				ammOptparse::Help "full"

			else
				ammLog::Error "Unknown action '$action'"
				r=1
			fi
			;;
	esac

	return $r
}

eval set -- $(ammOptparse::GetUnparsedOpts)
main "$@"
